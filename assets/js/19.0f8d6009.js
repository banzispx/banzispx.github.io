(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{367:function(e,t,n){"use strict";n.r(t);var a=n(42),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"深拷贝和浅拷贝的定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝的定义"}},[e._v("#")]),e._v(" 深拷贝和浅拷贝的定义")]),e._v(" "),n("p",[e._v("https://mp.weixin.qq.com/s/vXbFsG59L1Ba0DMcZeU2Bg\n我们来明确一下深拷贝和浅拷贝的定义：")]),e._v(" "),n("p",[e._v("浅拷贝：")]),e._v(" "),n("blockquote",[n("p",[e._v("创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。")])]),e._v(" "),n("p",[e._v("深拷贝：")]),e._v(" "),n("blockquote",[n("p",[e._v("将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象")])]),e._v(" "),n("p",[e._v("话不多说，浅拷贝就不再多说，下面我们直入正题：")]),e._v(" "),n("h2",{attrs:{id:"乞丐版"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#乞丐版"}},[e._v("#")]),e._v(" 乞丐版")]),e._v(" "),n("p",[e._v("在不使用第三方库的情况下，我们想要深拷贝一个对象，用的最多的就是下面这个方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("JSON.parse(JSON.stringify());\n")])])]),n("p",[e._v("这种写法非常简单，而且可以应对大部分的应用场景，但是它还是有很大缺陷的，比如拷贝其他引用类型、拷贝函数、循环引用等情况。")]),e._v(" "),n("p",[e._v("显然，面试时你只说出这样的方法是一定不会合格的。")]),e._v(" "),n("p",[e._v("接下来，我们一起来手动实现一个深拷贝方法。")]),e._v(" "),n("h2",{attrs:{id:"基础版本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础版本"}},[e._v("#")]),e._v(" 基础版本")]),e._v(" "),n("p",[e._v("如果是浅拷贝的话，我们可以很容易写出下面的代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function clone(target) {    \n  let cloneTarget = {};    \n  for (const key in target) {        \n    cloneTarget[key] = target[key];    \n  }    \n  return cloneTarget;};\n")])])]),n("p",[e._v("创建一个新的对象，遍历需要克隆的对象，将需要克隆对象的属性依次添加到新对象上，返回。")]),e._v(" "),n("p",[e._v("如果是深拷贝的话，考虑到我们要拷贝的对象是不知道有多少层深度的，我们可以用递归来解决问题，稍微改写上面的代码：")]),e._v(" "),n("ul",[n("li",[e._v("如果是原始类型，无需继续拷贝，直接返回")]),e._v(" "),n("li",[e._v("如果是引用类型，创建一个新的对象，遍历需要克隆的对象，将需要克隆对象的属性执行"),n("strong",[e._v("深拷贝后")]),e._v("依次添加到新对象上。")])]),e._v(" "),n("p",[e._v("很容易理解，如果有更深层次的对象可以继续递归直到属性为原始类型，这样我们就完成了一个最简单的深拷贝：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    function clone(target) {\n        if (typeof target === 'object') {\n            let cloneTarget = {};\n            for (const key in target) {\n                cloneTarget[key] = clone(target[key]);\n            }\n            return cloneTarget;\n        } else {\n            return target;\n        }\n    };\n")])])]),n("p",[e._v("这是一个最基础版本的深拷贝，这段代码可以让你向面试官展示你可以用递归解决问题，但是显然，他还有非常多的缺陷，比如，还没有考虑数组。")]),e._v(" "),n("h2",{attrs:{id:"考虑数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#考虑数组"}},[e._v("#")]),e._v(" 考虑数组")]),e._v(" "),n("p",[e._v("在上面的版本中，我们的初始化结果只考虑了普通的 "),n("code",[e._v("object")]),e._v("，下面我们只需要把初始化代码稍微一变，就可以兼容数组了：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = function clone(target) {\n    if (typeof target === 'object') {\n        let cloneTarget = Array.isArray(target) ? [] : {};\n        for (const key in target) {\n            cloneTarget[key] = clone(target[key]);\n        }\n        return cloneTarget;\n    } else {\n        return target;\n    }\n};\n")])])]),n("p",[e._v("在clone2.test.js中执行下面的测试用例：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const target = {\n    field1: 1,\n    field2: undefined,\n    field3: {\n        child: 'child'\n    },\n    field4: [2, 4, 8]\n};\ntarget.target = target;\n\n")])])]),n("p",[e._v("OK，没有问题，你的代码又向合格迈进了一小步。")]),e._v(" "),n("h2",{attrs:{id:"循环引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#循环引用"}},[e._v("#")]),e._v(" 循环引用")]),e._v(" "),n("p",[e._v("我们执行下面这样一个测试用例：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const target = {\n    field1: 1,\n    field2: undefined,\n    field3: {\n        child: 'child'\n    },\n    field4: [2, 4, 8]\n};\ntarget.target = target;\n")])])]),n("p",[e._v("很明显，因为递归进入死循环导致栈内存溢出了。")]),e._v(" "),n("p",[e._v("原因就是上面的对象存在循环引用的情况，即对象的属性间接或直接的引用了自身的情况：\n解决循环引用问题，我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中找，有没有拷贝过这个对象，如果有的话直接返回，如果没有的话继续拷贝，这样就巧妙化解的循环引用的问题。")]),e._v(" "),n("p",[e._v("这个存储空间，需要可以存储 "),n("code",[e._v("key-value")]),e._v("形式的数据，且 "),n("code",[e._v("key")]),e._v("可以是一个引用类型，我们可以选择 "),n("code",[e._v("Map")]),e._v("这种数据结构：")]),e._v(" "),n("ul",[n("li",[e._v("检查"),n("code",[e._v("map")]),e._v("中有无克隆过的对象")]),e._v(" "),n("li",[e._v("有 - 直接返回")]),e._v(" "),n("li",[e._v("没有 - 将当前对象作为"),n("code",[e._v("key")]),e._v("，克隆对象作为"),n("code",[e._v("value")]),e._v("进行存储")]),e._v(" "),n("li",[e._v("继续克隆")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function clone(target, map = new Map()) {\n    if (typeof target === 'object') {\n        let cloneTarget = Array.isArray(target) ? [] : {};\n        if (map.get(target)) {\n            return target;\n        }\n        map.set(target, cloneTarget);\n        for (const key in target) {\n            cloneTarget[key] = clone(target[key], map);\n        }\n        return cloneTarget;\n    } else {\n        return target;\n    }\n};\n\n")])])]),n("p",[e._v("再来执行上面的测试用例：")]),e._v(" "),n("img",{attrs:{src:e.$withBase("/js/circular.png"),alt:"mixureSecure"}}),e._v(" "),n("p",[e._v("可以看到，执行没有报错，且 "),n("code",[e._v("target")]),e._v("属性，变为了一个 "),n("code",[e._v("Circular")]),e._v("类型，即循环应用的意思。")]),e._v(" "),n("p",[e._v("接下来，我们可以使用， "),n("code",[e._v("WeakMap")]),e._v("提代 "),n("code",[e._v("Map")]),e._v("来使代码达到画龙点睛的作用。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function clone(target, map = new WeakMap()) {    // ...};\n")])])]),n("p",[e._v("为什么要这样做呢？，先来看看 "),n("code",[e._v("WeakMap")]),e._v("的作用：")]),e._v(" "),n("blockquote",[n("p",[e._v("WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。")])]),e._v(" "),n("p",[e._v("什么是弱引用呢？")]),e._v(" "),n("blockquote",[n("p",[e._v("在计算机程序设计中，弱引用与强引用相对，是指不能确保其引用的对象不会被垃圾回收器回收的引用。一个对象若只被弱引用所引用，则被认为是不可访问（或弱可访问）的，并因此可能在任何时刻被回收。")])]),e._v(" "),n("p",[e._v("我们默认创建一个对象："),n("code",[e._v("constobj={}")]),e._v("，就默认创建了一个强引用的对象，我们只有手动将 "),n("code",[e._v("obj=null")]),e._v("，它才会被垃圾回收机制进行回收，如果是弱引用对象，垃圾回收机制会自动帮我们回收。")]),e._v(" "),n("p",[e._v("举个例子：")]),e._v(" "),n("p",[e._v("如果我们使用 "),n("code",[e._v("Map")]),e._v("的话，那么对象间是存在强引用关系的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let obj = { name : 'ConardLi'}const target = {    obj:'code秘密花园'}obj = null;\n")])])]),n("p",[e._v("虽然我们手动将 "),n("code",[e._v("obj")]),e._v("，进行释放，然是 "),n("code",[e._v("target")]),e._v("依然对 "),n("code",[e._v("obj")]),e._v("存在强引用关系，所以这部分内存依然无法被释放。")]),e._v(" "),n("p",[e._v("再来看 "),n("code",[e._v("WeakMap")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let obj = { name : 'ConardLi'}const target = new WeakMap();target.set(obj,'code秘密花园');obj = null;\n")])])]),n("p",[e._v("如果是 "),n("code",[e._v("WeakMap")]),e._v("的话， "),n("code",[e._v("target")]),e._v("和 "),n("code",[e._v("obj")]),e._v("存在的就是弱引用关系，当下一次垃圾回收机制执行时，这块内存就会被释放掉。")]),e._v(" "),n("p",[e._v("设想一下，如果我们要拷贝的对象非常庞大时，使用 "),n("code",[e._v("Map")]),e._v("会对内存造成非常大的额外消耗，而且我们需要手动清除 "),n("code",[e._v("Map")]),e._v("的属性才能释放这块内存，而 "),n("code",[e._v("WeakMap")]),e._v("会帮我们巧妙化解这个问题。")]),e._v(" "),n("p",[e._v("我也经常在某些代码中看到有人使用 "),n("code",[e._v("WeakMap")]),e._v("来解决循环引用问题，但是解释都是模棱两可的，当你不太了解 "),n("code",[e._v("WeakMap")]),e._v("的真正作用时。我建议你也不要在面试中写这样的代码，结果只能是给自己挖坑，即使是准备面试，你写的每一行代码也都是需要经过深思熟虑并且非常明白的。")]),e._v(" "),n("p",[e._v("能考虑到循环引用的问题，你已经向面试官展示了你考虑问题的全面性，如果还能用 "),n("code",[e._v("WeakMap")]),e._v("解决问题，并很明确的向面试官解释这样做的目的，那么你的代码在面试官眼里应该算是合格了。")]),e._v(" "),n("h2",{attrs:{id:"性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[e._v("#")]),e._v(" 性能优化")]),e._v(" "),n("p",[e._v("在上面的代码中，我们遍历数组和对象都使用了 "),n("code",[e._v("forin")]),e._v("这种方式，实际上 "),n("code",[e._v("forin")]),e._v("在遍历时效率是非常低的，我们来对比下常见的三种循环 "),n("code",[e._v("for、while、forin")]),e._v("的执行效率：")]),e._v(" "),n("img",{attrs:{src:e.$withBase("/js/xingneng.png"),alt:"mixureSecure"}}),e._v(" "),n("p",[e._v("可以看到， "),n("code",[e._v("while")]),e._v("的效率是最好的，所以，我们可以想办法把 "),n("code",[e._v("forin")]),e._v("遍历改变为 "),n("code",[e._v("while")]),e._v("遍历。")]),e._v(" "),n("p",[e._v("我们先使用 "),n("code",[e._v("while")]),e._v("来实现一个通用的 "),n("code",[e._v("forEach")]),e._v("遍历， "),n("code",[e._v("iteratee")]),e._v("是遍历的回掉函数，他可以接收每次遍历的 "),n("code",[e._v("value")]),e._v("和 "),n("code",[e._v("index")]),e._v("两个参数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function forEach(array, iteratee) {\n    let index = -1;\n    const length = array.length;\n    while (++index < length) {\n        iteratee(array[index], index);\n    }\n    return array;\n}\n")])])]),n("p",[e._v("下面对我们的 "),n("code",[e._v("cloen")]),e._v("函数进行改写：当遍历数组时，直接使用 "),n("code",[e._v("forEach")]),e._v("进行遍历，当遍历对象时，使用 "),n("code",[e._v("Object.keys")]),e._v("取出所有的 "),n("code",[e._v("key")]),e._v("进行遍历，然后在遍历时把 "),n("code",[e._v("forEach")]),e._v("会调函数的 "),n("code",[e._v("value")]),e._v("当作 "),n("code",[e._v("key")]),e._v("使用：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function clone(target, map = new WeakMap()) {\n    if (typeof target === 'object') {\n        const isArray = Array.isArray(target);\n        let cloneTarget = isArray ? [] : {};\n\n        if (map.get(target)) {\n            return target;\n        }\n        map.set(target, cloneTarget);\n\n        const keys = isArray ? undefined : Object.keys(target);\n        forEach(keys || target, (value, key) => {\n            if (keys) {\n                key = value;\n            }\n            cloneTarget[key] = clone2(target[key], map);\n        });\n\n        return cloneTarget;\n    } else {\n        return target;\n    }\n}\n\n")])])]),n("p",[e._v("下面，我们执行clone4.test.js分别对上一个克隆函数和改写后的克隆函数进行测试：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const target = {\n    field1: 1,\n    field2: undefined,\n    field3: {\n        child: 'child'\n    },\n    field4: [2, 4, 8],\n    f: { f: { f: { f: { f: { f: { f: { f: { f: { f: { f: { f: {} } } } } } } } } } } },\n};\n\ntarget.target = target;\n\nconsole.time();\nconst result = clone1(target);\nconsole.timeEnd();\n\nconsole.time();\nconst result2 = clone2(target);\nconsole.timeEnd();\n")])])]),n("p",[e._v("执行结果：")]),e._v(" "),n("p",[e._v(".5ms .1ms")]),e._v(" "),n("p",[e._v("很明显，我们的性能优化是有效的。")]),e._v(" "),n("p",[e._v("到这里，你已经向面试官展示了，在写代码的时候你会考虑程序的运行效率，并且你具有通用函数的抽象能力。")]),e._v(" "),n("h2",{attrs:{id:"其他数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他数据类型"}},[e._v("#")]),e._v(" 其他数据类型")]),e._v(" "),n("p",[e._v("在上面的代码中，我们其实只考虑了普通的 "),n("code",[e._v("object")]),e._v("和 "),n("code",[e._v("array")]),e._v("两种数据类型，实际上所有的引用类型远远不止这两个，还有很多，下面我们先尝试获取对象准确的类型。")]),e._v(" "),n("h3",{attrs:{id:"合理的判断引用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合理的判断引用类型"}},[e._v("#")]),e._v(" 合理的判断引用类型")]),e._v(" "),n("p",[e._v("首先，判断是否为引用类型，我们还需要考虑 "),n("code",[e._v("function")]),e._v("和 "),n("code",[e._v("null")]),e._v("两种特殊的数据类型：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function isObject(target) {\n    const type = typeof target;\n    return target !== null && (type === 'object' || type === 'function');\n}\n    if (!isObject(target)) {\n        return target;\n    }\n\n")])])]),n("h3",{attrs:{id:"获取数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取数据类型"}},[e._v("#")]),e._v(" 获取数据类型")]),e._v(" "),n("p",[e._v("我们可以使用 "),n("code",[e._v("toString")]),e._v("来获取准确的引用类型：")]),e._v(" "),n("blockquote",[n("p",[e._v("每一个引用类型都有 "),n("code",[e._v("toString")]),e._v("方法，默认情况下， "),n("code",[e._v("toString()")]),e._v("方法被每个 "),n("code",[e._v("Object")]),e._v("对象继承。如果此方法在自定义对象中未被覆盖，t "),n("code",[e._v("oString()")]),e._v("返回 "),n("code",[e._v('"[object type]"')]),e._v("，其中type是对象的类型。")])]),e._v(" "),n("p",[e._v("注意，上面提到了如果此方法在自定义对象中未被覆盖， "),n("code",[e._v("toString")]),e._v("才会达到预想的效果，事实上，大部分引用类型比如 "),n("code",[e._v("Array、Date、RegExp")]),e._v("等都重写了 "),n("code",[e._v("toString")]),e._v("方法。")]),e._v(" "),n("p",[e._v("我们可以直接调用 "),n("code",[e._v("Object")]),e._v("原型上未被覆盖的 "),n("code",[e._v("toString()")]),e._v("方法，使用 "),n("code",[e._v("call")]),e._v("来改变 "),n("code",[e._v("this")]),e._v("指向来达到我们想要的效果。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function getType(target) {    \n  return Object.prototype.toString.call(target);\n}\n")])])]),n("img",{attrs:{src:e.$withBase("/js/toString.png"),alt:"mixureSecure"}}),e._v(" "),n("p",[e._v("下面我们抽离出一些常用的数据类型以便后面使用：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const mapTag = '[object Map]';\nconst setTag = '[object Set]';\nconst arrayTag = '[object Array]';const objectTag = '[object Object]';\nconst boolTag = '[object Boolean]';const dateTag = '[object Date]';\nconst errorTag = '[object Error]';const numberTag = '[object Number]';\nconst regexpTag = '[object RegExp]';const stringTag = '[object String]';\nconst symbolTag = '[object Symbol]';\n")])])]),n("p",[e._v("在上面的集中类型中，我们简单将他们分为两类：")]),e._v(" "),n("ul",[n("li",[e._v("可以继续遍历的类型")]),e._v(" "),n("li",[e._v("不可以继续遍历的类型")])]),e._v(" "),n("p",[e._v("我们分别为它们做不同的拷贝。")]),e._v(" "),n("h3",{attrs:{id:"可继续遍历的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可继续遍历的类型"}},[e._v("#")]),e._v(" 可继续遍历的类型")]),e._v(" "),n("p",[e._v("上面我们已经考虑的 "),n("code",[e._v("object")]),e._v("、 "),n("code",[e._v("array")]),e._v("都属于可以继续遍历的类型，因为它们内存都还可以存储其他数据类型的数据，另外还有 "),n("code",[e._v("Map")]),e._v("， "),n("code",[e._v("Set")]),e._v("等都是可以继续遍历的类型，这里我们只考虑这四种，如果你有兴趣可以继续探索其他类型。")]),e._v(" "),n("p",[e._v("有序这几种类型还需要继续进行递归，我们首先需要获取它们的初始化数据，例如上面的 "),n("code",[e._v("[]")]),e._v("和 "),n("code",[e._v("{}")]),e._v("，我们可以通过拿到 "),n("code",[e._v("constructor")]),e._v("的方式来通用的获取。")]),e._v(" "),n("p",[e._v("例如："),n("code",[e._v("consttarget={}")]),e._v("就是 "),n("code",[e._v("consttarget=newObject()")]),e._v("的语法糖。另外这种方法还有一个好处：因为我们还使用了原对象的构造方法，所以它可以保留对象原型上的数据，如果直接使用普通的 "),n("code",[e._v("{}")]),e._v("，那么原型必然是丢失了的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function getInit(target) {    \n  const Ctor = target.constructor;    \n  return new Ctor();\n}\n")])])]),n("p",[e._v("下面，我们改写 "),n("code",[e._v("clone")]),e._v("函数，对可继续遍历的数据类型进行处理：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function clone(target, map = new WeakMap()) {\n\n    // 克隆原始类型\n    if (!isObject(target)) {\n        return target;\n    }\n\n    // 初始化\n    const type = getType(target);\n    let cloneTarget;\n    if (deepTag.includes(type)) {\n        cloneTarget = getInit(target, type);\n    }\n\n    // 防止循环引用\n    if (map.get(target)) {\n        return target;\n    }\n    map.set(target, cloneTarget);\n\n    // 克隆set\n    if (type === setTag) {\n        target.forEach(value => {\n            cloneTarget.add(clone(value));\n        });\n        return cloneTarget;\n    }\n\n    // 克隆map\n    if (type === mapTag) {\n        target.forEach((value, key) => {\n            cloneTarget.set(key, clone(value));\n        });\n        return cloneTarget;\n    }\n\n    // 克隆对象和数组\n    const keys = type === arrayTag ? undefined : Object.keys(target);\n    forEach(keys || target, (value, key) => {\n        if (keys) {\n            key = value;\n        }\n        cloneTarget[key] = clone(target[key], map);\n    });\n\n    return cloneTarget;\n}\n\n")])])]),n("p",[e._v("我们执行clone5.test.js对下面的测试用例进行测试：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const target = {\n    field1: 1,\n    field2: undefined,\n    field3: {\n        child: 'child'\n    },\n    field4: [2, 4, 8],\n    empty: null,\n    map,\n    set,\n};\n\n")])])]),n("p",[e._v("执行结果：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/aDoYvepE5x0ocaqyO4ciaNVlImEC8SJEzK8cumyNpibr32WmswbFnrTV1aEYZnl7oNicpCefAibHUyuZHR0nJNiaJVw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"img"}})]),e._v(" "),n("p",[e._v("没有问题，里大功告成又进一步，下面我们继续处理其他类型：")]),e._v(" "),n("h3",{attrs:{id:"不可继续遍历的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不可继续遍历的类型"}},[e._v("#")]),e._v(" 不可继续遍历的类型")]),e._v(" "),n("p",[e._v("其他剩余的类型我们把它们统一归类成不可处理的数据类型，我们依次进行处理：")]),e._v(" "),n("p",[n("code",[e._v("Bool")]),e._v("、 "),n("code",[e._v("Number")]),e._v("、 "),n("code",[e._v("String")]),e._v("、 "),n("code",[e._v("String")]),e._v("、 "),n("code",[e._v("Date")]),e._v("、 "),n("code",[e._v("Error")]),e._v("这几种类型我们都可以直接用构造函数和原始数据创建一个新对象：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function cloneOtherType(targe, type) {\n    const Ctor = targe.constructor;\n    switch (type) {\n        case boolTag:\n        case numberTag:\n        case stringTag:\n        case errorTag:\n        case dateTag:\n            return new Ctor(targe);\n        case regexpTag:\n            return cloneReg(targe);\n        case symbolTag:\n            return cloneSymbol(targe);\n        default:\n            return null;\n    }\n}\n\n")])])]),n("p",[e._v("克隆 "),n("code",[e._v("Symbol")]),e._v("类型：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function cloneSymbol(targe) {\n    return Object(Symbol.prototype.valueOf.call(targe));\n}\n\n克隆正则：\n\nfunction cloneReg(targe) {\n    const reFlags = /\\w*$/;\n    const result = new targe.constructor(targe.source, reFlags.exec(targe));\n    result.lastIndex = targe.lastIndex;\n    return result;\n}\n\n")])])]),n("p",[e._v("实际上还有很多数据类型我这里没有写到，有兴趣的话可以继续探索实现一下。")]),e._v(" "),n("p",[e._v("能写到这里，面试官已经看到了你考虑问题的严谨性，你对变量和类型的理解，对 "),n("code",[e._v("JS API")]),e._v("的熟练程度，相信面试官已经开始对你刮目相看了。")]),e._v(" "),n("h3",{attrs:{id:"克隆函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#克隆函数"}},[e._v("#")]),e._v(" 克隆函数")]),e._v(" "),n("p",[e._v("最后，我把克隆函数单独拎出来了，实际上克隆函数是没有实际应用场景的，两个对象使用一个在内存中处于同一个地址的函数也是没有任何问题的，我特意看了下 "),n("code",[e._v("lodash")]),e._v("对函数的处理：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" const isFunc = typeof value == 'function' if (isFunc || !cloneableTags[tag]) {        return object ? value : {} }\n")])])]),n("p",[e._v("可见这里如果发现是函数的话就会直接返回了，没有做特殊的处理，但是我发现不少面试官还是热衷于问这个问题的，而且据我了解能写出来的少之又少。。。")]),e._v(" "),n("p",[e._v("实际上这个方法并没有什么难度，主要就是考察你对基础的掌握扎实不扎实。")]),e._v(" "),n("p",[e._v("首先，我们可以通过 "),n("code",[e._v("prototype")]),e._v("来区分下箭头函数和普通函数，箭头函数是没有 "),n("code",[e._v("prototype")]),e._v("的。")]),e._v(" "),n("p",[e._v("我们可以直接使用 "),n("code",[e._v("eval")]),e._v("和函数字符串来重新生成一个箭头函数，注意这种方法是不适用于普通函数的。")]),e._v(" "),n("p",[e._v("我们可以使用正则来处理普通函数：")]),e._v(" "),n("p",[e._v("分别使用正则取出函数体和函数参数，然后使用 "),n("code",[e._v("newFunction([arg1[,arg2[,...argN]],]functionBody)")]),e._v("构造函数重新构造一个新的函数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function cloneFunction(func) {\n    const bodyReg = /(?<={)(.|\\n)+(?=})/m;\n    const paramReg = /(?<=\\().+(?=\\)\\s+{)/;\n    const funcString = func.toString();\n    if (func.prototype) {\n        console.log('普通函数');\n        const param = paramReg.exec(funcString);\n        const body = bodyReg.exec(funcString);\n        if (body) {\n            console.log('匹配到函数体：', body[0]);\n            if (param) {\n                const paramArr = param[0].split(',');\n                console.log('匹配到参数：', paramArr);\n                return new Function(...paramArr, body[0]);\n            } else {\n                return new Function(body[0]);\n            }\n        } else {\n            return null;\n        }\n    } else {\n        return eval(funcString);\n    }\n}\n\n")])])]),n("p",[e._v("最后，我们再来执行clone6.test.js对下面的测试用例进行测试：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const map = new Map();\nmap.set('key', 'value');\nmap.set('ConardLi', 'code秘密花园');\n\nconst set = new Set();\nset.add('ConardLi');\nset.add('code秘密花园');\n\nconst target = {\n    field1: 1,\n    field2: undefined,\n    field3: {\n        child: 'child'\n    },\n    field4: [2, 4, 8],\n    empty: null,\n    map,\n    set,\n    bool: new Boolean(true),\n    num: new Number(2),\n    str: new String(2),\n    symbol: Object(Symbol(1)),\n    date: new Date(),\n    reg: /\\d+/,\n    error: new Error(),\n    func1: () => {\n        console.log('code秘密花园');\n    },\n    func2: function (a, b) {\n        return a + b;\n    }\n};\n\n")])])]),n("p",[e._v("执行结果：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/aDoYvepE5x0ocaqyO4ciaNVlImEC8SJEzaw9SxEejMiaUXSllOjMjXI4uy1icVEsfXxRojJyDxtZVtHDHk9nxrFFw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"img"}})]),e._v(" "),n("h2",{attrs:{id:"最后"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[e._v("#")]),e._v(" 最后")]),e._v(" "),n("p",[e._v("为了更好的阅读，我们用一张图来展示上面所有的代码：\n"),n("img",{attrs:{src:e.$withBase("/js/deepclone.png"),alt:"mixureSecure"}})]),e._v(" "),n("p",[e._v("完整代码：https://github.com/ConardLi/ConardLi.github.io/blob/master/demo/deepClone/src/clone_6.js")]),e._v(" "),n("p",[e._v("可见，一个小小的深拷贝还是隐藏了很多的知识点的。")]),e._v(" "),n("p",[e._v("千万不要以最低的要求来要求自己，如果你只是为了应付面试中的一个题目，那么你可能只会去准备上面最简陋的深拷贝的方法。")]),e._v(" "),n("p",[e._v("但是面试官考察你的目的是全方位的考察你的思维能力，如果你写出上面的代码，可以体现你多方位的能力：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("基本实现")])]),e._v(" "),n("li",[n("ul",[n("li",[e._v("递归能力")])])]),e._v(" "),n("li",[n("p",[e._v("循环引用")])]),e._v(" "),n("li",[n("ul",[n("li",[e._v("考虑问题的全面性")]),e._v(" "),n("li",[e._v("理解weakmap的真正意义")])])]),e._v(" "),n("li",[n("p",[e._v("多种类型")])]),e._v(" "),n("li",[n("ul",[n("li",[e._v("考虑问题的严谨性")]),e._v(" "),n("li",[e._v("创建各种引用类型的方法，JS API的熟练程度")]),e._v(" "),n("li",[e._v("准确的判断数据类型，对数据类型的理解程度")])])]),e._v(" "),n("li",[n("p",[e._v("通用遍历：")])]),e._v(" "),n("li",[n("ul",[n("li",[e._v("写代码可以考虑性能优化")]),e._v(" "),n("li",[e._v("了解集中遍历的效率")]),e._v(" "),n("li",[e._v("代码抽象能力")])])]),e._v(" "),n("li",[n("p",[e._v("拷贝函数：")])]),e._v(" "),n("li",[n("ul",[n("li",[e._v("箭头函数和普通函数的区别")]),e._v(" "),n("li",[e._v("正则表达式熟练程度")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const mapTag = '[object Map]';\nconst setTag = '[object Set]';\nconst arrayTag = '[object Array]';\nconst objectTag = '[object Object]';\nconst argsTag = '[object Arguments]';\n\nconst boolTag = '[object Boolean]';\nconst dateTag = '[object Date]';\nconst numberTag = '[object Number]';\nconst stringTag = '[object String]';\nconst symbolTag = '[object Symbol]';\nconst errorTag = '[object Error]';\nconst regexpTag = '[object RegExp]';\nconst funcTag = '[object Function]';\n\nconst deepTag = [mapTag, setTag, arrayTag, objectTag, argsTag];\n\n\nfunction forEach(array, iteratee) {\n    let index = -1;\n    const length = array.length;\n    while (++index < length) {\n        iteratee(array[index], index);\n    }\n    return array;\n}\n\nfunction isObject(target) {\n    const type = typeof target;\n    return target !== null && (type === 'object' || type === 'function');\n}\n\nfunction getType(target) {\n    return Object.prototype.toString.call(target);\n}\n\nfunction getInit(target) {\n    const Ctor = target.constructor;\n    return new Ctor();\n}\n\nfunction cloneSymbol(targe) {\n    return Object(Symbol.prototype.valueOf.call(targe));\n}\n\nfunction cloneReg(targe) {\n    const reFlags = /\\w*$/;\n    const result = new targe.constructor(targe.source, reFlags.exec(targe));\n    result.lastIndex = targe.lastIndex;\n    return result;\n}\n\nfunction cloneFunction(func) {\n    const bodyReg = /(?<={)(.|\\n)+(?=})/m;\n    const paramReg = /(?<=\\().+(?=\\)\\s+{)/;\n    const funcString = func.toString();\n    if (func.prototype) {\n        const param = paramReg.exec(funcString);\n        const body = bodyReg.exec(funcString);\n        if (body) {\n            if (param) {\n                const paramArr = param[0].split(',');\n                return new Function(...paramArr, body[0]);\n            } else {\n                return new Function(body[0]);\n            }\n        } else {\n            return null;\n        }\n    } else {\n        return eval(funcString);\n    }\n}\n\nfunction cloneOtherType(targe, type) {\n    const Ctor = targe.constructor;\n    switch (type) {\n        case boolTag:\n        case numberTag:\n        case stringTag:\n        case errorTag:\n        case dateTag:\n            return new Ctor(targe);\n        case regexpTag:\n            return cloneReg(targe);\n        case symbolTag:\n            return cloneSymbol(targe);\n        case funcTag:\n            return cloneFunction(targe);\n        default:\n            return null;\n    }\n}\n\nfunction clone(target, map = new WeakMap()) {\n\n    // 克隆原始类型\n    if (!isObject(target)) {\n        return target;\n    }\n\n    // 初始化\n    const type = getType(target);\n    let cloneTarget;\n    if (deepTag.includes(type)) {\n        cloneTarget = getInit(target, type);\n    } else {\n        return cloneOtherType(target, type);\n    }\n\n    // 防止循环引用\n    if (map.get(target)) {\n        return map.get(target);\n    }\n    map.set(target, cloneTarget);\n\n    // 克隆set\n    if (type === setTag) {\n        target.forEach(value => {\n            cloneTarget.add(clone(value, map));\n        });\n        return cloneTarget;\n    }\n\n    // 克隆map\n    if (type === mapTag) {\n        target.forEach((value, key) => {\n            cloneTarget.set(key, clone(value, map));\n        });\n        return cloneTarget;\n    }\n\n    // 克隆对象和数组\n    const keys = type === arrayTag ? undefined : Object.keys(target);\n    forEach(keys || target, (value, key) => {\n        if (keys) {\n            key = value;\n        }\n        cloneTarget[key] = clone(target[key], map);\n    });\n\n    return cloneTarget;\n}\n\nmodule.exports = {\n    clone\n};\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);