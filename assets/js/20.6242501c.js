(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{365:function(t,n,e){"use strict";e.r(n);var a=e(42),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"eventloop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eventloop"}},[t._v("#")]),t._v(" EventLoop")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/6844904050543034376",target:"_blank",rel:"noopener noreferrer"}},[t._v("js运行机制"),e("OutboundLink")],1),t._v(" "),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/1/18/16fb7ae3b678f1ea?imageView2/0/w/1280/h/960/ignore-error/1",alt:"img"}}),t._v(" "),e("a",{attrs:{href:"https://juejin.cn/post/6903338967656366094",target:"_blank",rel:"noopener noreferrer"}},[t._v("十分钟弄懂EventLoop事件循环"),e("OutboundLink")],1),t._v("\n首先，整体的script(作为第一个宏任务)开始执行的时候，会把所有代码分为"),e("code",[t._v("同步任务")]),t._v("、"),e("code",[t._v("异步任务")]),t._v("两部分\n同步任务会直接进入主线程依次执行\n异步任务会再分为宏任务和微任务\n宏任务进入到Event Table中，并在里面注册回调函数，每当指定的事件完成时，Event Table会将这个函数移到Event Queue中\n微任务也会进入到另一个Event Table中，并在里面注册回调函数，每当指定的事件完成时，Event Table会将这个函数移到Event Queue中\n当主线程内的任务执行完毕，主线程为空时，会检查微任务的Event Queue，如果有任务，就全部执行，如果没有就执行下一个宏任务\n上述过程会不断重复，这就是Event Loop，比较完整的事件循环")]),t._v(" "),e("p",[t._v("常见的宏任务\ntask任务源非常宽泛，比如ajax的onload，click事件，基本上我们经常绑定的各种事件都是task任务源，还有数据库操作（IndexedDB ），需要注意的是setTimeout、setInterval、setImmediate也是task任务源。总结来说task任务源：")]),t._v(" "),e("ul",[e("li",[t._v("主代码块")]),t._v(" "),e("li",[t._v("setTimeout")]),t._v(" "),e("li",[t._v("setInterval")]),t._v(" "),e("li",[t._v("setImmediate ()-Node")]),t._v(" "),e("li",[t._v("requestAnimationFrame ()-浏览器")])]),t._v(" "),e("p",[t._v("常见微任务")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("process.nextTick ()-Node")])]),t._v(" "),e("li",[e("p",[t._v("Promise.then()")])]),t._v(" "),e("li",[e("p",[t._v("catch")])]),t._v(" "),e("li",[e("p",[t._v("finally")])]),t._v(" "),e("li",[e("p",[t._v("Object.observe 方法用于异步地监视一个对象的修改 (已经被废除， 推荐使用proxy)")])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver",target:"_blank",rel:"noopener noreferrer"}},[t._v("MutationObserver"),e("OutboundLink")],1),t._v(" 监听DOM变化")]),t._v(" "),e("h3",{attrs:{id:"微任务宏任务注意点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微任务宏任务注意点"}},[t._v("#")]),t._v(" 微任务宏任务注意点")])]),t._v(" "),e("li",[e("p",[t._v("浏览器会先执行一个宏任务，紧接着执行当前执行栈产生的微任务，再进行渲染，然后再执行下一个宏任务")])]),t._v(" "),e("li",[e("p",[t._v("微任务和宏任务不在一个任务队列，不在一个任务队列")]),t._v(" "),e("ul",[e("li",[t._v("例如"),e("code",[t._v("setTimeout")]),t._v("是一个宏任务，它的事件回调在宏任务队列，"),e("code",[t._v("Promise.then()")]),t._v("是一个微任务，它的事件回调在微任务队列，二者并不是一个任务队列")]),t._v(" "),e("li",[t._v("以Chrome 为例，有关渲染的都是在渲染进程中执行，渲染进程中的任务（DOM树构建，js解析…等等）需要主线程执行的任务都会在主线程中执行，而浏览器维护了一套事件循环机制，主线程上的任务都会放到消息队列中执行，主线程会循环消息队列，并从头部取出任务进行执行，如果执行过程中产生其他任务需要主线程执行的，渲染进程中的其他线程会把该任务塞入到消息队列的尾部，消息队列中的任务都是宏任务")]),t._v(" "),e("li",[t._v("微任务是如何产生的呢？当执行到script脚本的时候，js引擎会为全局创建一个执行上下文，在该执行上下文中维护了一个微任务队列，当遇到微任务，就会把微任务回调放在微队列中，当所有的js代码执行完毕，在退出全局上下文之前引擎会去检查该队列，有回调就执行，没有就退出执行上下文，这也就是为什么微任务要早于宏任务，也是大家常说的，每个宏任务都有一个微任务队列（由于定时器是浏览器的API，所以定时器是宏任务，在js中遇到定时器会也是放入到浏览器的队列中）")])]),t._v(" "),e("p",[e("code",[t._v("new Promise(() => {}).then()")]),t._v(" ，我们来看这样一个Promise代码")])])]),t._v(" "),e("p",[t._v("前面的 "),e("code",[t._v("new Promise()")]),t._v(" 这一部分是一个构造函数，这是一个同步任务")]),t._v(" "),e("p",[t._v("后面的 "),e("code",[t._v(".then()")]),t._v(" 才是一个异步微任务，这一点是非常重要的")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("new Promise((resolve) => {\n\tconsole.log(1)\n  resolve()\n}).then(()=>{\n\tconsole.log(2)\n})\nconsole.log(3)\n复制代码\n")])])]),e("p",[t._v("上面代码输出"),e("code",[t._v("1 3 2")]),t._v("\nasync/await本质上还是基于Promise的一些封装，而Promise是属于微任务的一种")]),t._v(" "),e("p",[t._v("所以在使用await关键字与Promise.then效果类似")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("setTimeout(() => console.log(4))\n\nasync function test() {\n  console.log(1)\n  await Promise.resolve()\n  console.log(3)\n}\n\ntest()\n\nconsole.log(2)\n复制代码\n")])])]),e("p",[t._v("上述代码输出"),e("code",[t._v("1 2 3 4")])]),t._v(" "),e("p",[t._v("可以理解为，"),e("code",[t._v("await")]),t._v(" 以前的代码，相当于与 "),e("code",[t._v("new Promise")]),t._v(" 的同步代码，"),e("code",[t._v("await")]),t._v(" 以后的代码相当于 "),e("code",[t._v("Promise.then")]),t._v("的异步")]),t._v(" "),e("h2",{attrs:{id:"闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),e("ul",[e("li",[t._v("闭包的使用场景\n1、保存变量在内存中\n2、函数柯里化\n3、深度克隆 避免自身相互调用")])]),t._v(" "),e("h2",{attrs:{id:"什么是proxy？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是proxy？"}},[t._v("#")]),t._v(" 什么是Proxy？")]),t._v(" "),e("p",[t._v("Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”，即对编程语言进行编程。")]),t._v(" "),e("p",[t._v("Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。")]),t._v(" "),e("blockquote",[e("p",[t._v("高能预警⚡⚡⚡")])]),t._v(" "),e("h2",{attrs:{id:"proxy实现双向代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proxy实现双向代理"}},[t._v("#")]),t._v(" proxy实现双向代理")]),t._v(" "),e("h2",{attrs:{id:"写一个通用的事件侦听器函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写一个通用的事件侦听器函数"}},[t._v("#")]),t._v(" 写一个通用的事件侦听器函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const EventUtils = {\n  // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n  // 添加事件\n  addEvent: function(element, type, handler) {\n    if (element.addEventListener) {\n      element.addEventListener(type, handler, false);\n    } else if (element.attachEvent) {\n      element.attachEvent("on" + type, handler);\n    } else {\n      element["on" + type] = handler;\n    }\n  },\n\n  // 移除事件\n  removeEvent: function(element, type, handler) {\n    if (element.removeEventListener) {\n      element.removeEventListener(type, handler, false);\n    } else if (element.detachEvent) {\n      element.detachEvent("on" + type, handler);\n    } else {\n      element["on" + type] = null;\n    }\n  },\n\n  // 获取事件目标\n  getTarget: function(event) {\n    return event.target || event.srcElement;\n  },\n\n  // 获取 event 对象的引用，取到事件的所有信息，确保随时能使用 event\n  getEvent: function(event) {\n    return event || window.event;\n  },\n\n  // 阻止事件（主要是事件冒泡，因为 IE 不支持事件捕获）\n  stopPropagation: function(event) {\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else {\n      event.cancelBubble = true;\n    }\n  },\n\n  // 取消事件的默认行为\n  preventDefault: function(event) {\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n  }\n};\n')])])]),e("h2",{attrs:{id:"js的深浅拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js的深浅拷贝"}},[t._v("#")]),t._v(" js的深浅拷贝")]),t._v(" "),e("h3",{attrs:{id:"浅拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[t._v("#")]),t._v(" 浅拷贝")]),t._v(" "),e("p",[t._v("创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象")]),t._v(" "),e("h3",{attrs:{id:"深拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[t._v("#")]),t._v(" 深拷贝")]),t._v(" "),e("p",[t._v("将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。\n"),e("strong",[t._v("浅拷贝的实现方式：")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Object.assign() 方法：")]),t._v(" 用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。")]),t._v(" "),e("li",[t._v("**Array.prototype.slice()：**slice() 方法返回一个新的数组对象，这一对象是一个由 begin和end（不包括end）决定的原数组的浅拷贝。原始数组不会被改变。")]),t._v(" "),e("li",[e("strong",[t._v("拓展运算符"),e("code",[t._v("...")]),t._v("：")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('let a = {\n    name: "Jake",\n    flag: {\n        title: "better day by day",\n        time: "2020-05-31"\n    }\n}\nlet b = {...a};\n复制代码\n')])])]),e("p",[e("strong",[t._v("深拷贝的实现方式：")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("乞丐版：")]),t._v(" JSON.parse(JSON.stringify(object))，缺点诸多（会忽略undefined、symbol、函数；不能解决循环引用；不能处理正则、new Date()）")]),t._v(" "),e("li",[e("strong",[t._v("基础版（面试够用）：")]),t._v(" 浅拷贝+递归 （只考虑了普通的 object和 array两种数据类型）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function cloneDeep(target,map = new WeakMap()) {\n  if(typeOf taret ==='object'){\n     let cloneTarget = Array.isArray(target) ? [] : {};\n    \n     if(map.get(target)) {\n        return target;\n    }\n     map.set(target, cloneTarget);\n     for(const key in target){\n        cloneTarget[key] = cloneDeep(target[key], map);\n     }\n     return cloneTarget\n  }else{\n       return target\n  }\n}\n")])])]),e("ul",[e("li",[e("strong",[t._v("终极版：")])])]),t._v(" "),e("h2",{attrs:{id:"手写call、apply及bind函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手写call、apply及bind函数"}},[t._v("#")]),t._v(" 手写call、apply及bind函数")]),t._v(" "),e("p",[e("strong",[t._v("call 函数的实现步骤：")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("注意："),e("strong",[t._v("该方法的语法和作用与 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("apply()")]),e("OutboundLink")],1),t._v(" 方法类似，只有一个区别，就是 "),e("code",[t._v("call()")]),t._v(" 方法接受的是")]),t._v("一个参数列表")]),t._v("，而 "),e("code",[t._v("apply()")]),t._v(" 方法接受的是"),e("strong",[t._v("一个包含多个参数的数组")]),t._v("。 function.call(thisArg, arg1, arg2, ...)")])]),t._v(" "),e("ul",[e("li",[t._v("1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。")]),t._v(" "),e("li",[t._v("2.判断传入上下文对象是否存在，如果不存在，则设置为 window 。")]),t._v(" "),e("li",[t._v("3.处理传入的参数，截取第一个参数后的所有参数。")]),t._v(" "),e("li",[t._v("4.将函数作为上下文对象的一个属性。")]),t._v(" "),e("li",[t._v("5.使用上下文对象来调用这个方法，并保存返回结果。")]),t._v(" "),e("li",[t._v("6.删除刚才新增的属性。")]),t._v(" "),e("li",[t._v("7.返回结果。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// call函数实现\nFunction.prototype.myCall = function(context) {\n  // 判断调用对象\n  if (typeof this !== "function") {\n    console.error("type error");\n  }\n\n  // 获取参数 第一个是this， 后面的是参数 所以要slice(1)\n  let args = [...arguments].slice(1),\n    result = null;\n\n  // 判断 context 是否传入，如果未传入则设置为 window\n  context = context || window;\n\n  // 将调用函数设为对象的方法\n  context.fn = this;\n\n  // 调用函数\n  result = context.fn(...args);\n\n  // 将属性删除\n  delete context.fn;\n\n  return result;\n};\n复制代码\n')])])]),e("p",[e("strong",[t._v("apply 函数的实现步骤：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("func.apply(thisArg必选, [argsArray]可选)\n")])])]),e("ul",[e("li",[e("ol",[e("li",[t._v("判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。")])])]),t._v(" "),e("li",[e("ol",[e("li",[t._v("判断传入上下文对象是否存在，如果不存在，则设置为 window 。")])])]),t._v(" "),e("li",[e("ol",[e("li",[t._v("将函数作为上下文对象的一个属性。")])])]),t._v(" "),e("li",[e("ol",[e("li",[t._v("判断参数值是否传入")])])]),t._v(" "),e("li",[e("ol",[e("li",[t._v("使用上下文对象来调用这个方法，并保存返回结果。")])])]),t._v(" "),e("li",[e("ol",[e("li",[t._v("删除刚才新增的属性")])])]),t._v(" "),e("li",[e("ol",[e("li",[t._v("返回结果")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// apply 函数实现\n\nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== "function") {\n    throw new TypeError("Error");\n  }\n\n  let result = null;\n\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n\n  // 将函数设为对象的方法\n  context.fn = this;\n\n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n\n  // 将属性删除\n  delete context.fn;\n\n  return result;\n};\n\n\n复制代码\n')])])]),e("p",[e("strong",[t._v("bind 函数的实现步骤：")])]),t._v(" "),e("p",[e("code",[t._v("**bind()**")]),t._v(" 方法创建一个新的函数，在 "),e("code",[t._v("bind()")]),t._v(" 被调用时，这个新函数的 "),e("code",[t._v("this")]),t._v(" 被指定为 "),e("code",[t._v("bind()")]),t._v(" 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。 "),e("code",[t._v("返回一个原函数的拷贝，并拥有指定的 **")]),t._v("this"),e("code",[t._v("** 值和初始参数。")])]),t._v(" "),e("ul",[e("li",[t._v("1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。")]),t._v(" "),e("li",[t._v("2.保存当前函数的引用，获取其余传入参数值。")]),t._v(" "),e("li",[t._v("3.创建一个函数返回")]),t._v(" "),e("li",[t._v("4.函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// bind 函数实现\nFunction.prototype.myBind = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== "function") {\n    throw new TypeError("Error");\n  }\n\n  // 获取参数\n  var args = [...arguments].slice(1),\n    fn = this;\n\n  return function Fn() {\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  };\n};\n复制代码\n')])])]),e("p",[t._v("参考文章：\n"),e("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/11",target:"_blank",rel:"noopener noreferrer"}},[t._v("《JavaScript 深入之 call 和 apply 的模拟实现》"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"函数柯里化的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数柯里化的实现"}},[t._v("#")]),t._v(" 函数柯里化的实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n\nfunction curry(fn, args) {\n  // 获取函数需要的参数长度\n  let length = fn.length;\n\n  args = args || [];\n\n  return function() {\n    let subArgs = args.slice(0);\n\n    // 拼接得到现有的所有参数\n    for (let i = 0; i < arguments.length; i++) {\n      subArgs.push(arguments[i]);\n    }\n\n    // 判断参数的长度是否已经满足函数所需参数的长度\n    if (subArgs.length >= length) {\n      // 如果满足，执行函数\n      return fn.apply(this, subArgs);\n    } else {\n      // 如果不满足，递归返回科里化的函数，等待参数的传入\n      return curry.call(this, fn, subArgs);\n    }\n  };\n}\n\n// es6 实现\nfunction curry(fn, ...args) {\n  return fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args);\n}\n")])])]),e("p",[t._v("参考文章： "),e("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/42",target:"_blank",rel:"noopener noreferrer"}},[t._v("《JavaScript 专题之函数柯里化》"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"new操作符的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new操作符的实现"}},[t._v("#")]),t._v(" new操作符的实现")]),t._v(" "),e("p",[e("code",[t._v("new")]),t._v(" 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。"),e("code",[t._v("new")]),t._v(" 关键字会进行如下的操作：")]),t._v(" "),e("ol",[e("li",[t._v("创建一个空的简单JavaScript对象（即{}）；")]),t._v(" "),e("li",[t._v("链接该对象（即设置该对象的构造函数）到另一个对象 ；")]),t._v(" "),e("li",[t._v("将步骤1新创建的对象作为this的上下文 ；")]),t._v(" "),e("li",[t._v("如果该函数没有返回对象，则返回this。")])]),t._v(" "),e("p",[t._v("接下来我们看实现：")]),t._v(" "),e("p",[t._v("接下来我们将以上步骤封装成一个对象实例化方法，即模拟new的操作：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function objectFactory(){\n    var obj = {};\n    //取得该方法的第一个参数(并删除第一个参数)，该参数是构造函数\n    var Constructor = [].shift.apply(arguments);\n    //将新对象的内部属性__proto__指向构造函数的原型，这样新对象就可以访问原型中的属性和方法\n    obj.__proto__ = Constructor.prototype;\n    //取得构造函数的返回值\n    var ret = Constructor.apply(obj, arguments);\n    //如果返回值是一个对象就返回该对象，否则返回构造函数的一个实例对象\n    return typeof ret === "object" ? ret : obj;\n}\n')])])]),e("p",[t._v("new 的优先级 看如下代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    function Foo() {\n        return this;\n    }\n    Foo.getName = function () {\n        console.log('1');\n    };\n    Foo.prototype.getName = function () {\n        console.log('2');\n    };\n\n    new Foo.getName();   // -> 1\n    new Foo().getName(); // -> 2\n")])])]),e("p",[t._v("new Foo() 的优先级大于 new Foo ，所以对于上述代码来说可以这样划分执行顺序")]),t._v(" "),e("p",[t._v("new (Foo.getName()); (new Foo()).getName();")]),t._v(" "),e("p",[t._v("对于第一个函数来说，先执行了 Foo.getName() ，所以结果为 1；对于后者来说，先执行 new Foo() 产生了一个实例，然后通过原型链找到了 Foo 上的 getName 函数，所以结果为 2")]),t._v(" "),e("h2",{attrs:{id:"iterator是什么，有什么作用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iterator是什么，有什么作用？"}},[t._v("#")]),t._v(" "),e("code",[t._v("Iterator")]),t._v("是什么，有什么作用？")]),t._v(" "),e("p",[t._v("JavaScript 原有的表示“集合”的数据结构，主要是数组（"),e("code",[t._v("Array")]),t._v("）和对象（"),e("code",[t._v("Object")]),t._v("），ES6 又添加了"),e("code",[t._v("Map")]),t._v("和"),e("code",[t._v("Set")]),t._v("。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是"),e("code",[t._v("Map")]),t._v("，"),e("code",[t._v("Map")]),t._v("的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。")]),t._v(" "),e("p",[t._v("JavaScript 原有的表示“集合”的数据结构，主要是数组（"),e("code",[t._v("Array")]),t._v("）和对象（"),e("code",[t._v("Object")]),t._v("），ES6 又添加了"),e("code",[t._v("Map")]),t._v("和"),e("code",[t._v("Set")]),t._v("。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是"),e("code",[t._v("Map")]),t._v("，"),e("code",[t._v("Map")]),t._v("的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。")]),t._v(" "),e("p",[t._v("遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。")]),t._v(" "),e("p",[t._v("Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令"),e("code",[t._v("for...of")]),t._v("循环，Iterator 接口主要供"),e("code",[t._v("for...of")]),t._v("消费。")]),t._v(" "),e("blockquote",[e("p",[t._v("Iterator 接口主要供"),e("code",[t._v("for...of")]),t._v("消费")])]),t._v(" "),e("p",[t._v("Iterator 的遍历过程是这样的。")]),t._v(" "),e("p",[t._v("（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。")]),t._v(" "),e("p",[t._v("（2）第一次调用指针对象的"),e("code",[t._v("next")]),t._v("方法，可以将指针指向数据结构的第一个成员。")]),t._v(" "),e("p",[t._v("（3）第二次调用指针对象的"),e("code",[t._v("next")]),t._v("方法，指针就指向数据结构的第二个成员。")]),t._v(" "),e("p",[t._v("（4）不断调用指针对象的"),e("code",[t._v("next")]),t._v("方法，直到它指向数据结构的结束位置。")]),t._v(" "),e("p",[t._v("每一次调用"),e("code",[t._v("next")]),t._v("方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含"),e("code",[t._v("value")]),t._v("和"),e("code",[t._v("done")]),t._v("两个属性的对象。其中，"),e("code",[t._v("value")]),t._v("属性是当前成员的值，"),e("code",[t._v("done")]),t._v("属性是一个布尔值，表示遍历是否结束。")]),t._v(" "),e("p",[t._v("Iterator 接口的目的，就是为所有数据结构，(array,object,map,set)提供了一种统一的访问机制，即"),e("code",[t._v("for...of")]),t._v("循环（详见下文）。当使用"),e("code",[t._v("for...of")]),t._v("循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。")]),t._v(" "),e("blockquote",[e("p",[t._v("ES6 规定，默认的 Iterator 接口部署在数据结构的"),e("code",[t._v("Symbol.iterator")]),t._v("属性，或者说，一个数据结构只要具有"),e("code",[t._v("Symbol.iterator")]),t._v("属性，就可以认为是“可遍历的”（iterable）")])]),t._v(" "),e("p",[t._v("原生具备 Iterator 接口的数据结构如下。")]),t._v(" "),e("ul",[e("li",[t._v("Array")]),t._v(" "),e("li",[t._v("Map")]),t._v(" "),e("li",[t._v("Set")]),t._v(" "),e("li",[t._v("String")]),t._v(" "),e("li",[t._v("TypedArray")]),t._v(" "),e("li",[t._v("函数的 arguments 对象")]),t._v(" "),e("li",[t._v("NodeList 对象")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let arr = ['a', 'b', 'c'];\nlet iter = arr[Symbol.iterator]();\niter.next() // { value: 'a', done: false }\niter.next() // { value: 'b', done: false }\niter.next() // { value: 'c', done: false }\niter.next() // { value: undefined, done: true }\n")])])]),e("blockquote",[e("p",[t._v("对于原生部署 Iterator 接口的数据结构，不用自己写遍历器生成函数，"),e("code",[t._v("for...of")]),t._v("循环会自动遍历它们。除此之外，其他数据结构（主要是对象）的 Iterator 接口，都需要自己在"),e("code",[t._v("Symbol.iterator")]),t._v("属性上面部署，这样才会被"),e("code",[t._v("for...of")]),t._v("循环遍历。")])]),t._v(" "),e("p",[t._v("对象（Object）之所以没有默认部署 Iterator  接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。本质上，遍历器是一种线性处理，对于任何非线性的数据结构，部署遍历器接口，就等于部署一种线性转换。不过，严格地说，对象部署遍历器接口并不是很必要，因为这时对象实际上被当作 Map 结构使用，ES5 没有 Map 结构，而 ES6 原生提供了。")]),t._v(" "),e("h2",{attrs:{id:"generator函数是什么，有什么作用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generator函数是什么，有什么作用？"}},[t._v("#")]),t._v(" "),e("code",[t._v("Generator")]),t._v("函数是什么，有什么作用？")]),t._v(" "),e("p",[t._v("Generator函数可以说是Iterator接口的具体实现方式。Generator 最大的特点就是可以控制函数的执行。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" z "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" z"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" it "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => {value: 6, done: false}")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => {value: 8, done: false}")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => {value: 42, done: true}")]),t._v("\n\n复制代码\n")])])]),e("p",[t._v("上面这个示例就是一个Generator函数，我们来分析其执行过程：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("首先 Generator 函数调用时它会返回一个迭代器")])]),t._v(" "),e("li",[e("code",[t._v("当执行第一次 next 时，传参会被忽略，并且函数暂停在 yield (x + 1) 处，所以返回 5 + 1 = 6")])]),t._v(" "),e("li",[e("code",[t._v("当执行第二次 next 时，传入的参数等于上一个 yield 的返回值，如果你不传参，yield 永远返回 undefined。此时 let y = 2 * 12，所以第二个 yield 等于 2 * 12 / 3 = 8")])]),t._v(" "),e("li",[e("code",[t._v("当执行第三次 next 时，传入的参数会传递给 z，所以 z = 13, x = 5, y = 24，相加等于 42")])])]),t._v(" "),e("p",[e("code",[t._v("Generator")]),t._v(" 函数一般见到的不多，其实也于他有点绕有关系，并且一般会配合 co 库去使用。当然，我们可以通过 "),e("code",[t._v("Generator")]),t._v(" 函数解决回调地狱的问题。")]),t._v(" "),e("h2",{attrs:{id:"instanceof的原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof的原理是什么"}},[t._v("#")]),t._v(" instanceof的原理是什么")]),t._v(" "),e("p",[t._v("A instanceof ==> B B.prototype是否在A的原型链上")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("function myInstanceof(left, right) {\n  let prototype = right.prototype\n  left = left.__proto__\n  while (true) {\n    if (left === null || left === undefined)\n      return false\n    if (prototype === left)\n      return true\n    left = left.__proto__\n  }\n}\n")])])]),e("h2",{attrs:{id:"js-的节流与防抖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-的节流与防抖"}},[t._v("#")]),t._v(" js 的节流与防抖")]),t._v(" "),e("p",[e("strong",[t._v("函数防抖")]),t._v(" 是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。")]),t._v(" "),e("p",[e("strong",[t._v("函数节流")]),t._v(" 是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数防抖的实现")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("debounce")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" wait")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timer "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" context "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      args "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arguments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果此时存在定时器的话，则取消之前的定时器重新记时")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("clearTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      timer "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置定时器，使事件间隔指定事件后执行")]),t._v("\n    timer "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" wait"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数节流的实现;")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("throttle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delay")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" preTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Date"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" context "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      args "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arguments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      nowTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Date"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果两次时间间隔超过了指定时间，则执行函数。")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nowTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" preTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" delay"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      preTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Date"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n复制代码\n")])])]),e("p",[t._v("详细资料可以参考：")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/6844903535125987335",target:"_blank",rel:"noopener noreferrer"}},[t._v("《轻松理解 JS 函数节流和函数防抖》"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/6844903575663935496",target:"_blank",rel:"noopener noreferrer"}},[t._v("《JavaScript 事件节流和事件防抖》"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/entry/6844903618827517965",target:"_blank",rel:"noopener noreferrer"}},[t._v("《JS 的防抖与节流》"),e("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=s.exports}}]);